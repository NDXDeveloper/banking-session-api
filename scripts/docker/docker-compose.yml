version: "3.8"

services:
  # API Banking Sessions
  banking-api:
    build:
      context: ../../
      dockerfile: scripts/docker/Dockerfile
    container_name: banking-session-api
    restart: unless-stopped
    ports:
      - "5000:8080"
      - "5001:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - TZ=UTC
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=BankingSessionDB;User Id=sa;Password=${DB_SA_PASSWORD};TrustServerCertificate=true;
      - ConnectionStrings__Redis=redis:6379
      - JwtSettings__SecretKey=${JWT_SECRET_KEY}
      - RedisSettings__ConnectionString=redis:6379
    depends_on:
      - sqlserver
      - redis
    networks:
      - banking-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SQL Server
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: banking-sqlserver
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_SA_PASSWORD}
      - MSSQL_PID=Express
      - TZ=UTC
    ports:
      - "1433:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - banking-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_SA_PASSWORD} -Q 'SELECT 1' || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis
  redis:
    image: redis:7-alpine
    container_name: banking-redis
    restart: unless-stopped
    environment:
      - TZ=UTC
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ../../config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - banking-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: banking-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - banking-api
    networks:
      - banking-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Seq (Centralisation des logs)
  seq:
    image: datalust/seq:latest
    container_name: banking-seq
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_PASSWORD}
      - TZ=UTC
    ports:
      - "5341:80"
    volumes:
      - seq-data:/data
    networks:
      - banking-network

  # Prometheus (MÃ©triques)
  prometheus:
    image: prom/prometheus:latest
    container_name: banking-prometheus
    restart: unless-stopped
    environment:
      - TZ=UTC
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
    networks:
      - banking-network
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: banking-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_SECURITY_ADMIN_USER=admin
      - TZ=UTC
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - banking-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  sqlserver-data:
    driver: local
  redis-data:
    driver: local
  seq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  banking-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
